AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws_pinpoint_demo

  an application to demo aws pinpoint along with lambda & kinesis integrations

Parameters:
  EmailChannelAddress:
    Type: String
  EmailChannelIdentityArn:
    Type: String
    
Resources:
  AWSPinpointApplication:
    Type: AWS::Pinpoint::App
    Properties:
      Name: aws_pinpoint_demo
      
  AWSPinpointEmailChannel:
    Type: AWS::Pinpoint::EmailChannel
    Properties:
      ApplicationId: !Ref AWSPinpointApplication
      FromAddress: !Ref EmailChannelAddress
      Identity: !Ref EmailChannelIdentityArn
  
  AWSPinpointEventStream:
    Type: AWS::Pinpoint::EventStream
    Properties:
      ApplicationId: !Ref AWSPinpointApplication
      DestinationStreamArn: !GetAtt PinpointKinesisStream.Arn
      RoleArn: !GetAtt PublishEventStreamIamRole.Arn
  
  EmailTemplatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  
  PublishEventStreamIamRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - 'pinpoint.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
        Policies:
        - PolicyName: pinpoint_kinesis_access
          PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                    - kinesis:PutRecords
                    - kinesis:DescribeStream
                    Resource: !GetAtt PinpointKinesisStream.Arn
  
  ProcessEventStreamFunctionIAMRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - 'lambda.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole       
          Policies:
          - PolicyName: lambda_kinesis_access
            PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Action:
                      - kinesis:GetRecords
                      - kinesis:GetShardIterator
                      - kinesis:DescribeStream
                      - kinesis:ListStreams
                      Resource: !GetAtt PinpointKinesisStream.Arn
          - PolicyName: lambda_sqs_access
            PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Action:
                      - sqs:SendMessage
                      Resource: 
                      - !GetAtt EmailQueue.Arn
                      - !GetAtt SMSQueue.Arn
                      - !GetAtt CatchAllQueue.Arn
                    
  SendMessagesFunctionIamRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - 'lambda.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
          - PolicyName: pinpoint_s3_access
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                    - s3:PutObject
                    - s3:GetObject
                    Resource: 
                      - !Join
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Ref EmailTemplatesBucket
                            - '/*'
          - PolicyName: pinpoint_mobiletargeting_access
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                    - mobiletargeting:SendMessages
                    Resource:
                      - !Join
                          - ''
                          - - 'arn:aws:mobiletargeting:'
                            - !Ref AWS::Region
                            - ':'
                            - !Ref AWS::AccountId
                            - ':apps/'
                            - !Ref AWSPinpointApplication
                            - '/messages'
          
  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_email_message/
      Role: !GetAtt SendMessagesFunctionIamRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
          Variables:
              TEMPLATE_BUCKET: !Ref EmailTemplatesBucket
              APPLICATION_ID: !Ref AWSPinpointApplication
  
  SendSMSFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_sms_message/
      Role: !GetAtt SendMessagesFunctionIamRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
          Variables:
              APPLICATION_ID: !Ref AWSPinpointApplication
  
  ProcessEventStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: process_event_stream/
      Role: !GetAtt ProcessEventStreamFunctionIAMRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
          Variables:
              EMAIL_QUEUE: !Ref EmailQueue
              SMS_QUEUE: !Ref SMSQueue
              CATCH_ALL_QUEUE: !Ref CatchAllQueue
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt PinpointKinesisStream.Arn
            BatchSize: 1
            StartingPosition: LATEST
              
  PinpointKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
  
  EmailQueue:
    Type: AWS::SQS::Queue
    
  SMSQueue:
    Type: AWS::SQS::Queue
    
  CatchAllQueue:
    Type: AWS::SQS::Queue
    
  CampaignStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "campaign_id"
          AttributeType: "S"
        -
          AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "campaign_id"
          KeyType: "HASH"
        -
          AttributeName: "user_id"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
    
  ProcessQueuesFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - 'lambda.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
        Policies:
        - PolicyName: lambda_dynamodb_access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt CampaignStatusTable.Arn
        - PolicyName: lambda_sqs_access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: 
                  - !GetAtt EmailQueue.Arn
                  - !GetAtt SMSQueue.Arn
                
  ProcessEmailQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: process_email_queue/
      Role: !GetAtt ProcessQueuesFunctionIAMRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
          Variables:
            CAMPAIGN_STATUS_TABLE: !Ref CampaignStatusTable
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
            BatchSize: 1
    
  ProcessSMSQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: process_sms_queue/
      Role: !GetAtt ProcessQueuesFunctionIAMRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
          Variables:
            CAMPAIGN_STATUS_TABLE: !Ref CampaignStatusTable
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt SMSQueue.Arn
            BatchSize: 1
  
  AWSPinpointDemoAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: aws_pinpoint_demo
      
  MessagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ParentId: !GetAtt
        - AWSPinpointDemoAPI
        - RootResourceId
      PathPart: messages
  
  EmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ParentId: !Ref MessagesResource
      PathPart: email
      
  SMSResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ParentId: !Ref MessagesResource
      PathPart: sms
      
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ParentId: !Ref MessagesResource
      PathPart: status
  
  AWSPinpointDemoAPIIAMRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - 'apigateway.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        Policies:
        - PolicyName: email_function_api_access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: 
                  - !GetAtt SendEmailFunction.Arn
                  - !GetAtt SendSMSFunction.Arn
      
  EmailPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ResourceId: !Ref EmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        Credentials: !GetAtt AWSPinpointDemoAPIIAMRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Uri: 
          !Join
            - ''
            - - 'arn:aws:apigateway:'
              - !Ref AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt SendEmailFunction.Arn 
              - '/invocations'
              
  SMSPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AWSPinpointDemoAPI
      ResourceId: !Ref SMSResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        Credentials: !GetAtt AWSPinpointDemoAPIIAMRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Uri: 
          !Join
            - ''
            - - 'arn:aws:apigateway:'
              - !Ref AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt SendSMSFunction.Arn 
              - '/invocations'
              
Outputs:

  AWSPinpointApplication:
    Description: "The Pinpoint Application"
    Value: !GetAtt AWSPinpointApplication.Arn

